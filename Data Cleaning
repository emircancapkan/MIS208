import pandas as pd
import numpy as np

from sklearn.preprocessing import StandardScaler

from sklearn.preprocessing import LabelEncoder

np.seterr(divide='ignore', invalid='ignore')

# Reads the .csv file and loads the data into a DataFrame object
data = pd.read_csv('train.csv', encoding='utf-8')

# Displays the first few rows of the DataFrame object
print(data.head())

# Checks for missing data
print(data.isnull().sum())

# Checks and removes outliers
q1 = data.quantile(0.25)
q3 = data.quantile(0.75)
iqr = q3 - q1
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr
lower_bound, upper_bound = lower_bound.align(upper_bound, axis=0, copy=False)
data = data[(data >= lower_bound) & (data <= upper_bound)]

# Deletes unnecessary spaces in all columns
data = data.apply(lambda x: x.str.strip() if x.dtype == "object" else x)

# Deletes unnecessary characters in all columns
data = data.replace('[^0-9a-zA-Z]', '', regex=True)

# Normalizes data
data = (data - data.mean()) / data.std()

# Initialise the Scaler
scaler = StandardScaler()
 
# To scale data
scaler.fit(data)

# Find categorical columns
categorical_cols = [col for col in data.columns if data[col].dtype == 'object']

# Encode categorical variables
for col in categorical_cols:
    le = LabelEncoder()
    data[col] = le.fit_transform(data[col].astype(str))
    
# Delete blank cells in between
data = data.interpolate()

# Delete blank columns
data = data.dropna(axis=1, how='all')

# Shifts the filled columns to the left
data = data.apply(lambda x: x.dropna().reset_index(drop=True))

# Allows saving cleaned data to a new .csv file
data.to_csv('the_last_cleaned_data.csv', index=False)

data = pd.read_csv('the_last_cleaned_data.csv', header = None)
boxplot = data.boxplot(figsize = (15, 15))

# Gives me the heat map of the data 
import seaborn as sn
import matplotlib.pyplot as plt

corrMatrix = data.corr()
sn.set (rc = {'figure.figsize':(66, 66)})
sn.heatmap(corrMatrix, annot=True)
plt.show()

# Cleans the points where correlation is very high and columns represent itself
corrMatrix = data.corr()
high_corr_cols = (corrMatrix.abs() > 0.9).sum()
high_corr_cols = high_corr_cols[high_corr_cols > 1].index
drop_cols = set()
for col in high_corr_cols:
    if col not in drop_cols:
        drop_cols |= set(high_corr_cols[high_corr_cols != col])
data = data.drop(drop_cols, axis=1)
corrMatrix = data.corr()
sn.set(rc={'figure.figsize':(40, 40)})
sn.heatmap(corrMatrix, annot=True)
plt.show()

